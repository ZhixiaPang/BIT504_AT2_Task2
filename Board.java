import java.awt.Color;import java.awt.Graphics;public class Board {	// Grid line width	public static final int GRID_WIDTH = 8;	// Grid line half width	public static final int GRID_WIDTH_HALF = GRID_WIDTH / 2;	private Cell[][] cells; // Change the data type to Cell[][]	public Board() {		cells = new Cell[GameMain.ROWS][GameMain.COLS]; // Initialize as Cell[][]		initializeCells();	}	// Add the getCell method	public Cell getCell(int row, int col) {		return cells[row][col];	}	// Add the setCell method	public void setCell(int row, int col, Cell cell) {		cells[row][col] = cell;	}	private void initializeCells() {		for (int row = 0; row < GameMain.ROWS; row++) {			for (int col = 0; col < GameMain.COLS; col++) {				cells[row][col] = new Cell(row, col, Player.EMPTY); // Initialize as Player.EMPTY			}		}	}	private boolean checkArrayForWin(Player[] array, Player playerSymbol) {		for (Player cell : array) {			if (cell != playerSymbol) {				return false;			}		}		return true;	}	/* Return true if it is a draw */	public boolean isDraw() {		// Iterate through each cell on the game board		for (int row = 0; row < GameMain.ROWS; ++row) {			for (int col = 0; col < GameMain.COLS; ++col) {				// If any cell's content is not EMPTY, the game is not a draw				if (cells[row][col].getContent() != Player.EMPTY) {					return false;				}			}		}		// If all cells are filled, the game is a draw		return true;	}	/* Return true if the current player "thePlayer" has won after making their move */	public boolean hasWon(Player thePlayer, int playerRow, int playerCol) {		// Check if player has three symbols in that row		Player[] rowArray = new Player[GameMain.COLS];		for (int col = 0; col < GameMain.COLS; ++col) {			rowArray[col] = cells[playerRow][col].getContent();		}		if (checkArrayForWin(rowArray, thePlayer)) {			return true;		}		Player[] colArray = new Player[GameMain.ROWS];		for (int row = 0; row < GameMain.ROWS; ++row) {			colArray[row] = cells[row][playerCol].getContent();		}		if (checkArrayForWin(colArray, thePlayer)) {			return true;		}		if (playerRow + playerCol == GameMain.ROWS - 1) {			Player[] antiDiagonalArray = new Player[GameMain.ROWS];			for (int i = 0; i < GameMain.ROWS; ++i) {				antiDiagonalArray[i] = cells[i][GameMain.ROWS - 1 - i].getContent();			}			if (checkArrayForWin(antiDiagonalArray, thePlayer)) {				return true;			}		}		return false;	}	public void paint(Graphics g) {		// Draw the grid lines		g.setColor(Color.gray);		for (int row = 1; row < GameMain.ROWS; ++row) {			int y = row * GameMain.CELL_SIZE - GRID_WIDTH_HALF;			drawHorizontalLine(g, 0, y, GameMain.CANVAS_WIDTH);		}		for (int col = 1; col < GameMain.COLS; ++col) {			int x = col * GameMain.CELL_SIZE - GRID_WIDTH_HALF;			drawVerticalLine(g, x, 0, GameMain.CANVAS_HEIGHT);		}		// Draw the symbols in the cells using the Cell class		for (int row = 0; row < GameMain.ROWS; ++row) {			for (int col = 0; col < GameMain.COLS; ++col) {				cells[row][col].paint(g);			}		}	}	// Method to draw a cross (X)	private void drawCross(Graphics g, int x, int y) {		g.setColor(Color.BLACK);		g.drawLine(x + GRID_WIDTH_HALF, y + GRID_WIDTH_HALF,				x + GameMain.CELL_SIZE - GRID_WIDTH_HALF, y + GameMain.CELL_SIZE - GRID_WIDTH_HALF);		g.drawLine(x + GRID_WIDTH_HALF, y + GameMain.CELL_SIZE - GRID_WIDTH_HALF,				x + GameMain.CELL_SIZE - GRID_WIDTH_HALF, y + GRID_WIDTH_HALF);	}	private void drawHorizontalLine(Graphics g, int x, int y, int width) {		g.fillRect(x, y, width, GRID_WIDTH);	}	private void drawVerticalLine(Graphics g, int x, int y, int height) {		g.fillRect(x, y, GRID_WIDTH, height);	}}